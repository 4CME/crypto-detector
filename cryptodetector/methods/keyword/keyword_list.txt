#/* <legal-notice>
#*
#* Copyright (c) 2016 Wind River Systems, Inc.
#*
#* This software has been developed and maintained under the Wind River
#* CodeSwap program. The right to copy, distribute, modify, or otherwise
#* make use of this software may be licensed only pursuant to the terms
#* of an applicable Wind River license agreement.
#*
#* <credits>
#*   { Kamyar Kaviani,  kamyar.kaviani@windriver.com}
#* </credits>
#*
#* </legal-notice>
#*/

#
# List of keywords
#
# \b is a special symbol that matches beginning or end of a token (word)
#
# Use \bword\b to search for whole-words
#
# "language" can be one of:
# 	"all" (any text file),
# 	"source" (any source code file),
# 	"c" (C or C++),
# 	"python",
# 	"java",
# 	"shell",
# 	"perl",
# 	"javascript",
# 	"scala",
# 	"haskell",
# 	"pascal"

[{"match_type": "algorithm/asymmetric/DiffieHellman", "language": "all"}]
	"Diffie.?Hellman"
	"\bDHParameterSpec"
	"\bDHPublicKey"
	"\bDHPrivateKey"

[{"match_type": "algorithm/asymmetric/DSA", "language": "all"}]
	"\bDSA_"
	"_DSA\b"
	"_DSA_"
	"\bdsa\b"
	"\bDSAPrivateKey"
	"\bDSAPublicKey"
	"\bDSA_new"

[{"match_type": "algorithm/asymmetric/ECC", "language": "all"}]
	"Elliptic.?Curve"
	"_ECC_"
	"\bECC_"
	"ECDSA_"
	"ECDSA"
	"ECDH"
	"\bCkDh\b"
	"CkCrypt2"
	"\bEC_GROUP_"
	"\bEC_KEY_"
	"\becc_make_key"
	"1\.2\.840\.10045\.3\.1\.1"
	"secp192r1"
	"secp256r1"
	"secp521r1"

[{"match_type": "algorithm/asymmetric/ElGamal", "language": "all"}]
	"El.?Gamal"
	"\bELG_secret_key"
	"\bELG_public_key"
	"\belg_generate"
	"\belg_encrypt"
	"\belg_decrypt"
	"\belg_sign"
	"\belg_verify"

[{"match_type": "algorithm/symmetric/block-cipher/GOST", "language": "all"}]
	"\bGOST[ _-]?28147"

[{"match_type": "algorithm/asymmetric/RSA", "language": "all"}]
	"\bRSA_"
	"_RSA\b"
	"_RSA_"
	"\brsa\b"
	"RSASignature"
	"\bX9.?31"

[{"match_type": "algorithm/hash/generic", "language": "all"}]
	"\blhash"
	"\bhexdigest"

[{"match_type": "algorithm/hash/BLAKE", "language": "all"}]
	"\bBLAKE.?256"
	"\bBLAKE2b"

[{"match_type": "algorithm/hash/HMAC", "language": "all"}]
	"\bHMAC"

[{"match_type": "algorithm/hash/MD", "language": "all"}]
	"\bMD[245]"
	"\bmdString"
	"0xd76aa478"
	"0xe8c7b756"
	"0x5A827999"

[{"match_type": "algorithm/hash/RIPEMD", "language": "all"}]
	"\bRIPEMD"

[{"match_type": "algorithm/hash/SHA", "language": "all"}]
	"\bSHA.?(?:[1-5]|Init)"
	"0x67452301"

[{"match_type": "algorithm/hash/Tiger", "language": "all"}]
	"0x02aab17cf7e90c5e"
	"\btiger_init"
	"\btiger_final"
	"\btiger_context"

[{"match_type": "algorithm/hash/Whirlpool", "language": "all"}]
	"0x1823c6e887b8014f"
	"\bwhirlpool"

[{"match_type": "algorithm/hybrid/PGP", "language": "all"}]
	"PGP"
	"GPG"

[{"match_type": "algorithm/symmetric/block-cipher/AES", "language": "all"}]
	"\bAES_"
	"_AES\b"
	"_AES_"
	"\baes\b"
	"AES128"
	"\brijndael"
	"\bBMGL"
	"99, 124, 119, 123, 242, 107, 111, 197"

[{"match_type": "algorithm/symmetric/block-cipher/Blowfish", "language": "all"}]
	"\bblowfish"
	"_blowfish"
	"BF_set_?key"
	"0xD1310BA6"
	"0x8979FB1B"
	"\bBF_[^ \%\;\n\t]*(?:crypt|cipher)"

[{"match_type": "algorithm/symmetric/block-cipher/Camellia", "language": "all"}]
	"\bCamellia"
	"0xA09E667F"

[{"match_type": "algorithm/symmetric/block-cipher/IntelCascade", "language": "all"}]
	"\bcascade_cipher"

[{"match_type": "algorithm/symmetric/block-cipher/CAST", "language": "all"}]
	"\bCAST5"
	"\bCAST-128"
	"\bCAST_128"
	"\bCAST-256"
	"\bCAST_256"
	"\bCAST_[^ \%\;\n\t]*(?:crypt|cipher)"
	"\bcast.[ch]\b"
	"0x30fb40d4"
	"0x7EC90C04"
	"0x0F1946B8"

[{"match_type": "algorithm/symmetric/block-cipher/CRYPTON", "language": "all"}]
	"\bCRYPTON"

[{"match_type": "algorithm/symmetric/block-cipher/DES", "language": "all"}]
	"\bDES_"
	"_DES\b"
	"_DES_"
	"_triple?des"
	"\b3DES"
	"DES-EDE"
	"DES-XEX"
	"\bDESX"
	"0x01010400"
	"58, 50, 42, 34, 26, 18, 10"
	"\bRawDES"

[{"match_type": "algorithm/symmetric/block-cipher/Feistel", "language": "all"}]
	"\bfeistel"
	"\bLuby.?Rackoff"

[{"match_type": "algorithm/symmetric/block-cipher/KASUMI", "language": "all"}]
	"\bKASUMI"

[{"match_type": "algorithm/symmetric/block-cipher/BEARLION", "language": "all"}]
	"\bbear.?lion"

[{"match_type": "algorithm/symmetric/block-cipher/IDEA", "language": "all"}]
	"\bideainit"
	"\bidea_[^ \%\;\n\t]*(?:crypt|cipher)"
	"\bideaEncrypt"
	"\bideaDecrypt"

[{"match_type": "algorithm/symmetric/block-cipher/SAFER", "language": "all"}]
	"\bSAFER.?S?K"

[{"match_type": "algorithm/symmetric/block-cipher/SHACAL", "language": "all"}]
	"\bSHACAL"

[{"match_type": "algorithm/symmetric/block-cipher/Anubis", "language": "all"}]
	"\bAnubis"

[{"match_type": "algorithm/symmetric/block-cipher/CSCipher", "language": "all"}]
	"\bCS.?Cipher"

[{"match_type": "algorithm/symmetric/block-cipher/DFC", "language": "all"}]
	"\bDFCv2"

[{"match_type": "algorithm/symmetric/block-cipher/Diamond2", "language": "all"}]
	"\bDiamond2\b"

[{"match_type": "algorithm/symmetric/block-cipher/Serpent", "language": "all"}]
	"\bSerpent\b"
	"\bserpent_"

[{"match_type": "algorithm/symmetric/block-cipher/Twofish", "language": "all"}]
	"\btwofish"
	"_twofish"
	"0xA9, 0x67, 0xB3, 0xE8"
	"0xBCBC3275"

[{"match_type": "algorithm/symmetric/block-cipher/Threefish", "language": "all"}]
	"\bThreeFish"

[{"match_type": "algorithm/symmetric/block-cipher/XTEA", "language": "all"}]
	"\bXTEA"

[{"match_type": "algorithm/symmetric/stream-cipher/ChaCha20", "language": "all"}]
	"\bChaCha20"

[{"match_type": "algorithm/symmetric/stream-cipher/Salsa20", "language": "all"}]
	"\bSalsa.?20"

[{"match_type": "algorithm/symmetric/block-cipher/MISTY1", "language": "all"}]
	"\bMISTY1"
	"0x1B, 0x32, 0x33, 0x5A"

[{"match_type": "algorithm/symmetric/block-cipher/NOEKEON", "language": "all"}]
	"\bnoekeon"

[{"match_type": "algorithm/symmetric/block-cipher/RC2", "language": "all"}]
	"\bRC2_128"
	"\bRC2 encryption"
	"\bA?RC2_[^ \%\;\n\t]*(?:crypt|cipher)"
	"\bRC2Context"
	"\bRC2_CBC"
	"\bRC2_ECB"
	"\bRC2_BLOCK_SIZE"

[{"match_type": "algorithm/symmetric/stream-cipher/RC4", "language": "all"}]
	"\bArcfour"
	"\bA?RC4_[^ \%\;\n\t]*(?:crypt|cipher)"

[{"match_type": "algorithm/symmetric/block-cipher/RC5", "language": "all"}]
	"\bA?RC5_[^ \%\;\n\t]*(?:crypt|cipher)"
	"0xb7e15163"

[{"match_type": "algorithm/symmetric/block-cipher/RC6", "language": "all"}]
	"\bA?RC6_[^ \%\;\n\t]*(?:crypt|cipher)"

[{"match_type": "algorithm/symmetric/block-cipher/SEED", "language": "all"}]
	"0x16c6d2d4"
	"0x3c6ef373"
	"\bseed_encrypt"
	"\bseed_decrypt"
	"\bseed_setkey"

[{"match_type": "library/BeeCrypt", "language": "all"}]
	"\bBeeCrypt"

[{"match_type": "library/BouncyCastle", "language": "source"}]
	"bouncycastle"

[{"match_type": "library/Botan", "language": "all"}]
	"\bbotan\b"
	"\bBOTAN_"

[{"match_type": "library/Libgcrypt", "language": "all"}]
	"\bLibgcrypt"

[{"match_type": "library/Crypto++", "language": "all"}]
	"\bCRYPTOPP"
	"ProcessAndXorBlock"
	"BlockCipherFinal"

[{"match_type": "library/cryptlib", "language": "all"}]
	"\bcryptlib"
	"\bcryptCreate"
	"\bcryptEncrypt"
	"\bcryptDecrypt"

[{"match_type": "library/OpenSSH", "language": "all"}]
	"\blibssh"
	"\bOpenSSH"

[{"match_type": "library/OpenSSL", "language": "all"}]
	"\bEVP_"
	"_EVP_"
	"\blibssl"
	"\bOpenSSL"

[{"match_type": "library/SpongyCastle", "language": "all"}]
	"spongycastle"

[{"match_type": "protocol/kerberos", "language": "all"}]
	"kerberos"

[{"match_type": "protocol/PKI", "language": "all"}]
	"\bpki\b"
	"pkcs"
	"\bx509"
	"\bx.509"
	"\bx-509"
	"Public.?Key"
	"Private.?Key"
	"\bpubkey"
	"\bpub_key"
	"_pubkey"
	"priv_key"

[{"match_type": "protocol/SSH", "language": "all"}]
	"\bssh[2\_\- ]"
	"_ssh\b"

[{"match_type": "protocol/SSL", "language": "source"}]
	"\bSSL_"
	"_SSL_"
	"_SSL\b"
	"\bssl\b"
	"\bossl_"
	"libssl"
	"SSLSocket"

[{"match_type": "protocol/TLS", "language": "all"}]
	"TLSv1"
	"mbedtls"
	"\bgnutls"
	"\btls_cipher"
	"\btls_server"
	"\btls_client"

[{"match_type": "protocol/MQV", "language": "all"}]
	"\bMQV\b"
	"_MQV_"
	"\bMQV_Domain"

[{"match_type": "generic", "language": "all"}]
	"crypt"
	"\bcipher"
	"_cipher"
	"\bgenerateWorkingKey"
	"\bBlockCipher"
	"\bStreamCipher"
	"\bkey_schedule"
	"MERSENNE"
